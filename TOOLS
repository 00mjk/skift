#!/usr/bin/python3

import json
import os
import subprocess
import sys
import shutil

import sys

sys.path.insert(0, os.path.join(os.getcwd(), "scripts"))

import project
import toolchain

def get_projects(location):
    """
    Get all projects in a directory.

    Parameters
    ----------
    location: location of the directorie (str).

    Return
    ------
    A list of all projects.
    """
    projects = {}

    for file in os.listdir(location):
        # Get project's paths
        project_path = os.path.join(location, file)
        json_path = os.path.join(project_path, "project.json")

        if os.path.isdir(project_path) and os.path.exists(json_path):
            # Load project's json.
            data = json.loads(open(json_path).read())

            projects[data["id"]] = project.Project(project_path, data)

    return projects

def build_ramdisk(location, projects):
    print("\nGenerating ramdisk...")
    ram_disk = toolchain.MKDIR(os.path.join(location, "ramdisk"))

    sys_dir = toolchain.MKDIR(os.path.join(ram_disk, "System"))
    app_dir = toolchain.MKDIR(os.path.join(ram_disk, "Application"))
    lib_dir = toolchain.MKDIR(os.path.join(ram_disk, "Library"))
    hdr_dir = toolchain.MKDIR(os.path.join(lib_dir, "Header"))
    usr_dir = toolchain.MKDIR(os.path.join(ram_disk, "User"))
    man_dir = toolchain.MKDIR(os.path.join(ram_disk, "Manual"))

    libs = [projects[p] for p in projects if projects[p].builded and projects[p].type == project.ProjectTypes.LIB]
    apps = [projects[p] for p in projects if projects[p].builded and projects[p].type == project.ProjectTypes.APP]

    # Copy apps
    for app in apps:
        destination = os.path.join(app_dir, os.path.basename(app.get_output()))
        toolchain.COPY(app.get_output(), destination)

    # Copy libs
    for lib in libs:
        destination = os.path.join(lib_dir, os.path.basename(lib.get_output()))
        toolchain.COPY(lib.get_output(), destination)

        # Copy headers
        for hdr in lib.get_includes():
            dest = hdr.replace(lib.includes_path, hdr_dir)
            os.makedirs(os.path.dirname(dest), exist_ok=True)
            toolchain.COPY(hdr, dest)


    # Copy manuals
    # TODO

    toolchain.TAR(ram_disk, os.path.join(location, "ramdisk.tar"))

def build_iso(location, projects):
    iso_dir = toolchain.MKDIR(os.path.join(location, "iso"))
    boot_grub_dir = toolchain.MKDIR(os.path.join(iso_dir, "boot/grub"))


# --- Build Script ----------------------------------------------------------- #


if __name__ == "__main__":
    projects = get_projects("sources")

    if len(sys.argv) == 3 and sys.argv[1] == "info":
        projects[sys.argv[2]].info(projects)
    
    if len(sys.argv) == 2 and sys.argv[1] == "list":
        for project in projects:
            print(project, end=' ')
        print('')

    if len(sys.argv) == 3 and sys.argv[1] == "clean":
        projects[sys.argv[2]].clean()

    if len(sys.argv) == 2 and sys.argv[1] == "cleanall":
        toolchain.RMDIR("build")
        for id in projects:
            projects[id].clean()

    if len(sys.argv) == 3 and sys.argv[1] == "build":
        projects[sys.argv[2]].build(projects)

    if len(sys.argv) == 2 and sys.argv[1] == "buildall":
        for id in projects:
            if projects[id].type in (project.ProjectTypes.APP, project.ProjectTypes.KERNEL, project.ProjectTypes.MODULE):
                if not projects[id].build(projects):
                    print("Building %s failed!" % id)
                    exit()

        build_ramdisk("./build", projects)

    if (len(sys.argv) == 1) or (len(sys.argv) == 2 and sys.argv[1] == "help"):
        print("skiftOS build system.")
