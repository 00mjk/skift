#!/usr/bin/python3
"""
The skiftOS toolchain
=====================
build, run and distribute the skift operating system
"""

import sys
import os
sys.path.insert(0, os.path.join(os.getcwd(), "scripts"))

import json
import project
import shutil
import subprocess
import toolchain

def get_projects(location):
    """
    Get all projects in a directory.

    Parameters
    ----------
    location: location of the directorie (str).

    Return
    ------
    A list of all projects.
    """
    projects = {}

    for file in os.listdir(location):
        # Get project's paths
        project_path = os.path.join(location, file)
        json_path = os.path.join(project_path, "manifest.json")

        if os.path.isdir(project_path) and os.path.exists(json_path):
            # Load project's json.
            data = json.loads(open(json_path).read())

            projects[data["id"]] = project.Project(project_path, data)

    return projects

def build_ramdisk(location, projects):
    """
    Build the system ramdisk, in the future this will be a physical disk.

    Parameters
    ----------
    location: location where to build the ramdisk (str).
    projects: all loaded projects (dic).
    """

    print("\nGenerating ramdisk...")

    ram_disk = toolchain.MKDIR(os.path.join(location, "ramdisk"))

    app_dir  = toolchain.MKDIR(os.path.join(ram_disk, "Application"))
    man_dir  = toolchain.MKDIR(os.path.join(ram_disk, "Manual"))
    sys_dir  = toolchain.MKDIR(os.path.join(ram_disk, "System"))
    usr_dir  = toolchain.MKDIR(os.path.join(ram_disk, "User"))
    usr_dir  = toolchain.MKDIR(os.path.join(ram_disk, "User"))

    lib_dir  = toolchain.MKDIR(os.path.join(ram_disk, "Library"))
    hdr_dir  = toolchain.MKDIR(os.path.join(lib_dir,  "Header"))

    libs = [projects[p] for p in projects if projects[p].builded and projects[p].type == project.ProjectTypes.LIB]
    apps = [projects[p] for p in projects if projects[p].builded and projects[p].type == project.ProjectTypes.APP]

    # Copy apps
    for app in apps:
        destination = os.path.join(app_dir, os.path.basename(app.get_output()))
        toolchain.COPY(app.get_output(), destination)

    # Copy libs
    for lib in libs:
        destination = os.path.join(lib_dir, os.path.basename(lib.get_output()))
        toolchain.COPY(lib.get_output(), destination)

        # Copy headers
        for hdr in lib.get_includes():
            dest = hdr.replace(lib.includes_path, hdr_dir)
            os.makedirs(os.path.dirname(dest), exist_ok=True)
            toolchain.COPY(hdr, dest)

    ramdisk_file = os.path.join(location, "ramdisk.tar")
    toolchain.TAR(ram_disk, ramdisk_file)

    return ramdisk_file

def build_iso(location, kernel, ramdisk):
    iso_dir = toolchain.MKDIR(os.path.join(location, "iso"))
    boot_dir = toolchain.MKDIR(os.path.join(iso_dir, "boot"))
    grub_dir = toolchain.MKDIR(os.path.join(boot_dir, "grub"))

    grub_file = os.path.join(grub_dir, "grub.cfg")

    toolchain.COPY(kernel, os.path.join(boot_dir, "kernel.bin"))
    toolchain.COPY(ramdisk, os.path.join(boot_dir, "ramdisk.tar"))

    with open(grub_file, 'w') as f:
        f.write("# This file is auto generated.\n")
        f.write("set timeout=15\n")
        f.write("set default=0\n\n")

        f.write("menuentry \"skiftOS\" {\n")
        f.write("   multiboot /boot/kernel.bin\n")
        f.write("   module    /boot/ramdisk.tar ramdisk\n")
        f.write("   boot\n")
        f.write("}\n")

    toolchain.GRUB(iso_dir, os.path.join(location, "image.iso"))

    return os.path.join(location, "image.iso")

# --- Build Script ----------------------------------------------------------- #

def info(project, projects):
    projects[sys.argv[2]].info(projects)

def list_(projects):
        for project in projects:
            print(project, end=' ')
        print('')

def cleanall(projects):
    toolchain.RMDIR("build")
    for id in projects:
        projects[id].clean()

def buildall(projects):
    for id in projects:
        if projects[id].type in (project.ProjectTypes.APP, project.ProjectTypes.KERNEL, project.ProjectTypes.MODULE):
            if not projects[id].build(projects):
                print("Building %s failed!" % id)
                exit()

    ramdisk = build_ramdisk("./build", projects)
    return build_iso("./build", projects["kernel"].get_output(), ramdisk)

def main(argc, argv):
    projects = get_projects("sources")

    if argc >= 2:
        command = argv[1]

        if command == "list" or command == 'l': list_(projects)

        elif command == "info" or command == 'i' and argc == 3: info(argv[2], projects)

        elif command == "clean" or command == 'c' and argc == 3: projects[argv[2]].clean()

        elif command == "cleanall" or command == "ca": cleanall(projects)

        elif command == "build" or command == 'b' and argc == 3:
            if not projects[argv[2]].build(projects): print("Building %s failed!" % argv[2])
                
        elif command == "buildall" or command == "ba": buildall(projects)

        elif command == "rebuild" or command == 'rb' and argc == 3:
            projects[argv[2]].clean()
            if not projects[argv[2]].build(projects): print("Building %s failed!" % argv[2])

        elif command == "rebuildall" or command == "rba": 
            cleanall(projects)
            buildall(projects)

        elif command == "run" or command == "r":
            iso = buildall(projects)
            toolchain.QEMU(iso)

        else:
            print("skiftOS toolbox.")
            print("info, list, clean, cleanall, build, buildall")
        
    else:
        print("skiftOS toolbox.")

if __name__ == "__main__": main(len(sys.argv), sys.argv)
