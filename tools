#!/usr/bin/python3

"""
The skiftOS build system
"""

from pprint import pprint
from enum import Enum

import os
import sys
import json

# --- Utils ------------------------------------------------------------------ #

ESCAPE = '\033['

BLACK    = ESCAPE + '30m'
RED      = ESCAPE + '31m'
GREEN    = ESCAPE + '32m'
YELLOW   = ESCAPE + '33m'
BLUE     = ESCAPE + '34m'
MAGENTA  = ESCAPE + '35m'
CYAN     = ESCAPE + '36m'
WHITE    = ESCAPE + '37m'

BRIGHT_BLACK    = ESCAPE + '30;1m'
BRIGHT_RED      = ESCAPE + '31;1m'
BRIGHT_GREEN    = ESCAPE + '32;1m'
BRIGHT_YELLOW   = ESCAPE + '33;1m'
BRIGHT_BLUE     = ESCAPE + '34;1m'
BRIGHT_MAGENTA  = ESCAPE + '35;1m'
BRIGHT_CYAN     = ESCAPE + '36;1m'
BRIGHT_WHITE    = ESCAPE + '37;1m'

RESET    = ESCAPE + '0m'

def join(a, b):
    return os.path.join(a, b)

# --- Targets ---------------------------------------------------------------- #

class TargetTypes(Enum):
    INVALID = 0
    LIB = 1
    APP = 2
    KERNEL = 3
    MODULE = 4

    @staticmethod
    def FromStr(s):
        if s == "lib":
            return TargetTypes.LIB
        elif s == "app":
            return TargetTypes.APP
        elif s == "kernel":
            return TargetTypes.KERNEL
        elif s == "module":
            return TargetTypes.MODULE
        else:
            return TargetTypes.INVALID

class Target(object):
    def __init__(self, location, data):
        self.name = data["id"]
        self.type = TargetTypes.FromStr(data["type"])
        self.location = location

def list_targets(location):
    """
    
    """

    targets = {}

    for i in os.listdir(location):
        target_location = join(location, i)

        json_file = join(target_location, "manifest.json")

        if (os.path.exists(json_file)):
            data = json.loads(open(json_file).read())
            targets[data["id"]] = Target(target_location, data)

    return targets


# --- Action ----------------------------------------------------------------- #

def clean(target, targets):
    """Clean a target."""
    pass

def build(target, targets):
    """Build a target."""
    pass

def rebuild(target, targets):
    """Clean and build a target."""
    pass

def run(target, targets):
    """Start the kernel and the specified target."""
    pass

actions = \
    {
        "build": build,
        "clean": clean,
        "rebuild" : rebuild,
        "run": run
    }

def clean_all(targets):
    """Clean all targets."""
    pass

def build_all(targets):
    """Build all tagets."""
    pass

def rebuild_all(targets):
    """Clean and build all targets."""
    pass

def help_command(targets):
    """Show this help message."""
    print(BRIGHT_BLUE + "The skiftOS's build system." + "\n")

    print(BRIGHT_WHITE + "Usage :" + RESET + " ./tools [action] targets...")
    print("        ./tools [global action]")

    print("\n" + BRIGHT_WHITE + "Targets:" + RESET)
    print("   " ,', '.join(targets.keys()))

    print("\n" + BRIGHT_WHITE + "Actions:" + RESET)
    for act in actions:
        print("    %-12s %s" % (act, actions[act].__doc__))

    print("\n" + BRIGHT_WHITE + "Global actions:" + RESET)
    for act in global_actions:
        print("    %-12s %s" % (act, global_actions[act].__doc__))

def list_command(targets):
    """List all available targets."""
    print(','.join(targets.keys()))


global_actions = \
{
    "build-all": build_all,
    "clean-all": clean_all,
    "help": help_command,
    "list": list_command,
    "rebuild-all": rebuild_all,
}

# --- Commands --------------------------------------------------------------- #

# --- Main ------------------------------------------------------------------- #

def main(argc, argv):

    targets = list_targets("sources")

    if (argc >= 2):
        action = argv[1]
        
        if action in actions:
            #do it
            pass
        else:
            print(BRIGHT_RED + "ERROR: " + RESET + "No action named '%s'!" % action)
            print(BRIGHT_WHITE + "See: " + RESET + "./tools help.")
    else:
        help_command(targets)

    pprint(argv)

if __name__ == '__main__':
    main(len(sys.argv), sys.argv)